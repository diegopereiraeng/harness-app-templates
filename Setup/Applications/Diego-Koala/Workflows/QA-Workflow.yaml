harnessApiVersion: '1.0'
type: ROLLING
concurrencyStrategy: INFRA
envName: QA
failureStrategies:
- executionScope: WORKFLOW
  failureTypes:
  - APPLICATION_ERROR
  repairActionCode: ROLLBACK_WORKFLOW
  retryCount: 0
notificationRules:
- conditions:
  - FAILED
  executionScope: WORKFLOW
  notificationGroupAsExpression: false
  userGroupAsExpression: false
  userGroupNames:
  - Account Administrator
phases:
- type: KUBERNETES
  computeProviderName: Kubernetes Cluster Diego-GKE
  daemonSet: false
  infraDefinitionName: Diego-GKE-QA
  name: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    steps:
    - type: K8S_DEPLOYMENT_ROLLING
      name: Rollout Deployment
      properties:
        stateTimeoutInMinutes: 10
        templateUuid: null
        templateVariables: null
        templateVersion: null
    - type: JIRA_CREATE_UPDATE
      name: Update JIRA to "Ready for Testing"
      properties:
        comment: Finished deploying to QA. Ready for automated tests.
        customFields: null
        description: ''
        issueId: ${Jiravar.issueId}
        issueType: Test
        jiraAction: UPDATE_TICKET
        jiraConnectorName: Jira Demo Copy
        labels:
        - ''
        priority: P2
        project: HD
        publishAsVar: false
        status: In Progress
        summary: ''
        templateUuid: null
        templateVariables: null
        templateVersion: null
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Verify
    steps:
    - type: SHELL_SCRIPT
      name: Get LoadBalancer IP
      properties:
        commandPath: null
        connectionAttributeName: null
        delegateSelectors:
        - diego-koala
        executeOnDelegate: true
        host: null
        outputVars: URL
        publishAsVar: true
        scriptString: |
          echo "Getting External LoadBalancer IP"

          export URL=$(kubectl get svc ${service.name} -n ${infra.kubernetes.namespace} --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}") # Get the load balancer from k8s service

          sleep 2

          echo "External LoadBalancer IP: $URL"
        scriptType: BASH
        secretOutputVars: ''
        sshKeyRefName: null
        sweepingOutputName: api_service_qa
        sweepingOutputScope: PIPELINE
        templateExpressions: null
        templateUuid: null
        templateVariables: null
        templateVersion: null
        timeoutMillis: 60000
    - type: SHELL_SCRIPT
      name: Execute Selenium Test
      properties:
        commandPath: null
        connectionAttributeName: null
        delegateSelectors:
        - diego-koala
        executeOnDelegate: true
        host: null
        outputVars: ''
        publishAsVar: false
        scriptString: |-
          export TESTURL=${workflow.variables.API_URL}
          rm -rf java-restful-web-services
          git clone https://github.com/diegopereiraeng/java-restful-web-services
          python java-restful-web-services/${workflow.variables.TEST_SCRIPT} $TESTURL
        scriptType: BASH
        sshKeyRefName: null
        sweepingOutputName: null
        sweepingOutputScope: null
        templateExpressions: null
        templateUuid: null
        templateVariables: null
        templateVersion: null
        timeoutMillis: 60000
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    steps:
    - type: JIRA_CREATE_UPDATE
      name: Update JIRA to "Ready for Production"
      properties:
        comment: Finished deploying to QA. Ready for production.
        customFields: null
        description: ''
        issueId: ${Jiravar.issueId}
        issueType: Test
        jiraAction: UPDATE_TICKET
        jiraConnectorName: Jira Demo Copy
        labels:
        - ''
        priority: P2
        project: HD
        publishAsVar: false
        status: Done
        summary: ''
        templateUuid: null
        templateVariables: null
        templateVersion: null
    - type: JIRA_CREATE_UPDATE
      name: Create Production Change Request
      properties:
        customFields: null
        description: |-
          Deployment: ${deploymentUrl}
          Registry: ${artifact.source.registryUrl}
          Ticket with evidence tracking from Dev to QA.

          Jira Ticket: ${Jiravar.issueId}
        issueType: Change
        jiraAction: CREATE_TICKET
        jiraConnectorName: Jira Demo Copy
        labels:
        - diego-koala
        priority: P1
        project: HD
        publishAsVar: true
        summary: 'Production Deployment - App ${app.name} - Service: ${service.name}'
        sweepingOutputName: jira_production
        sweepingOutputScope: PIPELINE
        templateUuid: null
        templateVariables: null
        templateVersion: null
    stepsInParallel: false
  provisionNodes: false
  serviceName: diego-java-springboot-service
  statefulSet: false
  templateExpressions:
  - expression: ${Service}
    fieldName: serviceId
    metadata:
    - name: relatedField
    - name: artifactType
      value: DOCKER
    - name: entityType
      value: SERVICE
  - expression: ${InfraDefinition_QA}
    fieldName: infraDefinitionId
    metadata:
    - name: relatedField
    - name: entityType
      value: INFRASTRUCTURE_DEFINITION
rollbackPhases:
- type: KUBERNETES
  computeProviderName: Kubernetes Cluster Diego-GKE
  daemonSet: false
  infraDefinitionName: Diego-GKE-QA
  name: Rollback Rolling
  phaseNameForRollback: Rolling
  phaseSteps:
  - type: K8S_PHASE_STEP
    name: Deploy
    phaseStepNameForRollback: Deploy
    statusForRollback: SUCCESS
    steps:
    - type: K8S_DEPLOYMENT_ROLLING_ROLLBACK
      name: Rollback Deployment
    stepsInParallel: false
  - type: K8S_PHASE_STEP
    name: Wrap Up
    phaseStepNameForRollback: Wrap Up
    stepsInParallel: false
  provisionNodes: false
  serviceName: diego-java-springboot-service
  statefulSet: false
  templateExpressions:
  - expression: ${Service}
    fieldName: serviceId
    metadata:
    - name: relatedField
    - name: artifactType
      value: DOCKER
    - name: entityType
      value: SERVICE
  - expression: ${InfraDefinition_QA}
    fieldName: infraDefinitionId
    metadata:
    - name: relatedField
    - name: entityType
      value: INFRASTRUCTURE_DEFINITION
templateExpressions:
- expression: ${Service}
  fieldName: serviceId
  metadata:
  - name: relatedField
  - name: artifactType
    value: DOCKER
  - name: entityType
    value: SERVICE
- expression: ${InfraDefinition_QA}
  fieldName: infraDefinitionId
  metadata:
  - name: relatedField
  - name: entityType
    value: INFRASTRUCTURE_DEFINITION
templatized: true
userVariables:
- type: ENTITY
  description: Variable for Service entity in Rollback Rolling
  fixed: false
  mandatory: true
  name: Service
- type: ENTITY
  description: Variable for Infrastructure Definition entity in Rollback Rolling
  fixed: false
  mandatory: true
  name: InfraDefinition_QA
- type: TEXT
  fixed: false
  mandatory: false
  name: TEST_SCRIPT
  value: selenium-checker.py
- type: TEXT
  fixed: false
  mandatory: false
  name: API_URL
  value: http://${context.api_service.URL}:8080
